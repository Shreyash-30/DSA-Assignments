#include <iostream>
#include <cstring>
using namespace std;

struct Student {
    int roll;
    float sgpa;
    char name[50];
};

class Sorting {
private:
    Student s[15];
    int n;

public:
    Sorting() {
        n = 0;
    }
    void accept();
    void display();
    void sortRoll();
    void sortName(); // Using insertion sort
    int partitionSGPA(int low, int high);
    void qsSGPA(int low, int high);
    void sortTopper(int cnt); // Using quicksort
    void searchSgpa(float a);
    void searchName(const char name[50]);
};

void Sorting::accept() {
    cout << "Enter number of students: \n";
    cin >> n;
    for (int i = 0; i < n; i++) {
        cout << "Enter Student info \n";
        cout << "Enter student roll: \n";
        cin >> s[i].roll;
        cout << "Enter student SGPA: \n";
        cin >> s[i].sgpa;
        cout << "Enter student name: \n";
        cin >> s[i].name;
    }
}

void Sorting::display() {
    for (int i = 0; i < n; i++) {
        cout << "Student: " << i + 1 << "\n";
        cout << "Name: " << s[i].name << "\n";
        cout << "Roll no: " << s[i].roll << "\n";
        cout << "SGPA: " << s[i].sgpa << "\n";
        cout << "\n";
    }
}

void Sorting::sortRoll() {
    // Bubble sort
    for (int i = n - 1; i >= 0; i--) {
        for (int j = 0; j < i; j++) {
            if (s[j].roll > s[j + 1].roll) {
                Student temp = s[j];
                s[j] = s[j + 1];
                s[j + 1] = temp;
            }
        }
    }
}

void Sorting::sortName() {
    // Insertion sort
    for (int i = 1; i < n; i++) {
        Student key = s[i];
        int j = i - 1;
        while (j >= 0 && strcmp(s[j].name, key.name) > 0) {
            s[j + 1] = s[j];
            j--;
        }
        s[j + 1] = key;
    }
}

int Sorting::partitionSGPA(int low, int high) {
    float pivot = s[low].sgpa;
    int i = low;
    int j = high;

    while (i < j) {
        while (s[i].sgpa >= pivot && i <= high - 1) {
            i++;
        }

        while (s[j].sgpa < pivot && j >= low + 1) {
            j--;
        }
        if (i < j) {
            Student temp = s[i];
            s[i] = s[j];
            s[j] = temp;
        }
    }
    Student temp = s[low];
    s[low] = s[j];
    s[j] = temp;
    return j;
}

void Sorting::qsSGPA(int low, int high) {
    if (low < high) {
        int pIndex = partitionSGPA(low, high);
        qsSGPA(low, pIndex - 1);
        qsSGPA(pIndex + 1, high);
    }
}

void Sorting::sortTopper(int cnt) {
    qsSGPA(0, n - 1);  
    for (int i = 0; i < cnt; i++) {
        cout << "Topper " << i + 1 << ": " << s[i].name << "\n";
        cout << "SGPA: " << s[i].sgpa << "\n";
    }
}

void Sorting::searchSgpa(float a) {
    bool flag = false;
    for (int i = 0; i < n; i++) {
        if (s[i].sgpa == a) {
            cout << "Name: " << s[i].name << ", Roll: " << s[i].roll << ", SGPA: " << s[i].sgpa << "\n";
            flag = true;
        }
    }
    if (!flag) {
        cout << "Student with given SGPA not found\n";
    }
}

void Sorting::searchName(const char name[50]) {
    sortName();
    int low = 0, high = n - 1;
    bool flag = false;
    while (low <= high) {
        int mid = (low + high) / 2;
        int cmp = strcmp(s[mid].name, name);
        if (cmp == 0) {
            cout << "Name found: " << s[mid].name << ", Roll: " << s[mid].roll << ", SGPA: " << s[mid].sgpa << "\n";
            flag = true;
            break;
        }
        else if (cmp < 0) {
            low = mid + 1;
        }
        else {
            high = mid - 1;
        }
    }
    if (!flag) {
        cout << "Name not found\n";
    }
}

int main() {
    Sorting s;
    s.accept();
    s.display();
    cout << "\n";
    cout << "Sort by roll number \n";
    s.sortRoll();
    s.display();
    cout << "\n";
    
    cout << "Sort by name: \n";
    s.sortName();
    s.display();
    cout << "\n";
    
    cout << "Search SGPA 6.0\n";
    s.searchSgpa(6.0);
    
    cout << "\n";
    cout << "Sort toppers \n";
    s.sortTopper(3);
    s.searchName("a");
    
    return 0;
}

