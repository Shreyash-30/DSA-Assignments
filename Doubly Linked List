class DLL{
    public static void main(String[] args) {
      int[] arr = {10,20,30,40,50};
      Node head = createDLL(arr, arr.length);
      print(head);
    //     Node remove = removeKth(head, 3);
    //     System.out.println();
    //   print(remove);
      Node insert = insertKth(head, 40,3);
        System.out.println();
      print(insert);
    }
    public static Node createDLL(int[] arr, int n){
        Node head = new Node(arr[0]);
        Node temp = head;
        Node back = null;
       for(int i = 1; i<n; i++){
          Node newnp = new Node(arr[i]);
          newnp.prev = temp;
          temp.next = newnp;
          temp = newnp;
        }
        return head;
    }
    public static void print(Node head){
        Node temp = head;
        while(temp!= null){
            System.out.print (temp.data + " ");
            temp = temp.next;
            
        }
      
        }
      public static Node removeTail (Node head){
            if(head == null || head.next == null){
                return null;
            }
            Node temp = head;
            while(temp.next!= null){
                temp = temp.next;
            }
            Node prev = temp.prev;
            temp.prev =null;
            prev.next = null;
            return head;
      }
        public static Node removeHead(Node head){
            if(head == null || head.next == null){
                return null;
            }
            Node temp = head.next;
            // while(temp.next!= null){
            //     temp = temp.next;
            // }
            temp.prev = null;
            head.next =null;
            head = temp;
            return head;
      }
        public static Node removeKth (Node head, int k){
            if(head == null){
                return null;
            }
            if(head.next == null && k==1){
                return null;
            }
            Node temp =head;
            Node back = null;
            int cnt = 0;
            while(temp!=null){
                cnt ++;
                if(cnt ==k){
                    back.next = temp.next;
                    temp.next.prev = back;
                    
                }
                back = temp;
                temp = temp.next;
            }
           
            return head;
      }
    public static Node insertHead(Node head, int val){
        Node nHead = new Node(val);
        nHead.next = head;
        head.prev = nHead;
        nHead.prev = null;
        head = nHead;
        return head;
    }
     public static Node insertTail(Node head, int val){
        Node newNode = new Node(val);
        Node temp = head;
        while(temp.next != null){
            temp = temp.next;
        }
        temp.next = newNode;
        newNode.prev = temp;
        newNode.next = null;
        
        return head;
     }
        public static Node insertKth(Node head, int val,int k){
            //insert after
        Node newNode = new Node(val);
        Node temp = head;
        Node next = null;
        int cnt = 0;
        while(temp.next != null){
            cnt++;
            if(cnt == k){
                break;
            }
            next = temp.next.next;
            temp = temp.next;
        }
       temp.next = newNode;
       newNode.prev = temp;
       newNode.next = next;
       next.prev = newNode;
        
        return head;
     }
}
class Node{
  int data;
    Node next;
   Node prev;
    
    Node(){
        
    }
    Node(int data){
        this.data = data;
        this.next =null;
        this.prev = null;
    }
}
